USE [ST_Production]
GO

/****** Object:  UserDefinedFunction [APS].[LCEDifferentialPayInclusiveAsOf_2]    Script Date: 10/6/2017 9:29:57 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





/******************************************************************************************************

NEW DIFFERENTIAL PAY FOR 2017-2018 AND BEYOND


*******************************************************************************************************/


ALTER FUNCTION [APS].[LCEDifferentialPayInclusiveAsOf_2](@AsOfDate DATETIME)
RETURNS TABLE
AS
RETURN

SELECT 
	School, Teachername, Badge, HireDate
	,CASE WHEN ESL_BIL = 'ESL/BIL' THEN '' ELSE ESL END AS ESL
	,CASE WHEN ESL_BIL = 'ESL/BIL' THEN '' ELSE BIL END AS BIL
	,ESL_BIL
	, Total_ESL
	, Total_BIL
	, CASE 
		WHEN Total_ESL != 0 AND Total_BIL != 0  THEN Total_ESL_BIL 
	ELSE '' END AS Total_ESL_BIL


	,ORGANIZATION_GU

FROM (
SELECT 
	School, Teachername, Badge, HireDate,
	ISNULL(ESL,'') AS ESL, ISNULL(BIL,'') AS BIL, CASE WHEN ESL IS NOT NULL AND BIL IS NOT NULL THEN 'ESL/BIL' ELSE '' END AS ESL_BIL
	,Total_ESL AS Total_ESL 
	,COUNTBEP AS Total_BIL
	,COUNT_KIDS AS Total_ESL_BIL
	
	,ORGANIZATION_GU

 FROM 

(
SELECT 
	School, Teachername, Badge, HireDate
	,MAX(ESL) AS ESL
	,MAX(BIL) AS BIL
	,SUM(ESLStudent) AS Total_ESL
	,SUM(BilingualStudent) AS Total_BIL
	,ORGANIZATION_GU

FROM (

SELECT DISTINCT 
              
    Schedules.SCHOOL_NAME AS School
	,ORGANIZATION_GU
    ,Schedules.TEACHER_NAME AS TeacherName
	,Schedules.BADGE_NUM AS Badge
    ,Staff.HIRE_DATE AS HireDate

    ,CASE WHEN Schedules.COURSE_LEVEL = 'ESL'  THEN 'ESL' END AS ESL
    ,CASE WHEN Schedules.COURSE_LEVEL = 'BEP'  THEN 'BIL' END AS BIL
    ,CASE WHEN Schedules.COURSE_LEVEL = 'BEP' AND Schedules.COURSE_LEVEL = 'ESL' THEN 'ESL/BIL' END AS ESL_BIL
                           
    ,(CASE WHEN BEP.STUDENT_GU IS NOT NULL AND COURSE_LEVEL = 'BEP' THEN 1 ELSE 0 END) AS BilingualStudent
    ,(CASE WHEN  ELL.STUDENT_GU IS NOT NULL AND COURSE_LEVEL = 'ESL' THEN 1 ELSE 0 END) AS ESLStudent
	, STU.STUDENT_GU
	,Schedules.SIS_NUMBER



 FROM 

 (


SELECT DISTINCT 
SCHOOL_NAME, ORGANIZATION_GU, BADGE_NUM, COURSE_ID, SECTION_ID, TEACHER_NAME, SIS_NUMBER, COURSE_LEVEL

FROM (

--BEP STUDENTS RECEIVING SERVICE 
SELECT 
	SCHOOL_NAME, ORGANIZATION_GU,  BEP.BADGE_NUM, COURSE_ID, SECTION_ID, PERS.LAST_NAME + ', ' + PERS.FIRST_NAME AS TEACHER_NAME, SIS_NUMBER, BEP.COURSE_LEVEL

 FROM 
APS.BEPModelsAndHoursQualifiedAsOf(@AsOfDate) AS BEP
INNER JOIN
REV.EPC_STAFF AS STAFF
ON
BEP.BADGE_NUM = STAFF.BADGE_NUM
INNER JOIN 
REV.REV_PERSON AS PERS
ON
STAFF.STAFF_GU = PERS.PERSON_GU

UNION ALL 

--ESL STUDENTS - EL STUDENTS RECEIVING SERVICE
SELECT 
	ORGANIZATION_NAME, ORGANIZATION_GU, ESL.BADGE_NUM, ESL.COURSE_ID, SECTION_ID, PERS.LAST_NAME + ', ' + PERS.FIRST_NAME AS TEACHER_NAME, SIS_NUMBER, LST.COURSE_LEVEL
 FROM 
APS.LCEStudentsAndProvidersAsOf_2(@AsOfDate) AS ESL
INNER JOIN
REV.EPC_STAFF AS STAFF
ON
ESL.BADGE_NUM = STAFF.BADGE_NUM
INNER JOIN 
REV.REV_PERSON AS PERS
ON
STAFF.STAFF_GU = PERS.PERSON_GU
INNER JOIN 
REV.EPC_CRS AS CRS
ON
CRS.COURSE_ID = ESL.COURSE_ID
INNER JOIN 
REV.EPC_CRS_LEVEL_LST AS LST
ON
CRS.COURSE_GU = LST.COURSE_GU


WHERE ESL.COURSE_ID IS NOT NULL AND QUALIFIED_CLASS = 'Y'

) AS BEP_AND_ESL

) AS SCHEDULES

	INNER JOIN 
	REV.EPC_STU AS STU
	ON
	SCHEDULES.SIS_NUMBER = STU.SIS_NUMBER

	-- COUNT EL KIDS (ESL)
	LEFT HASH JOIN
	APS.ELLCalculatedAsOf (@AsOfDate) AS ELL
	ON
	STU.STUDENT_GU = ELL.STUDENT_GU

	-- COUNT BEP KIDS
	LEFT HASH JOIN 
	rev.EPC_STU_PGM_ELL_BEP AS BEP 
	ON
	BEP.STUDENT_GU = STU.STUDENT_GU
	AND BEP.EXIT_DATE IS NULL

	-- NEED TO READ STAFF FOR THE HIRE DATE                               
	LEFT HASH JOIN
	rev.EPC_STAFF AS Staff
	ON
	Staff.BADGE_NUM = Schedules.BADGE_NUM

	) AS DETAILS

GROUP BY 
		School, Teachername, Badge, HireDate, ORGANIZATION_GU

) AS TOTALS

INNER JOIN 
(
SELECT 
	COUNT(*) AS COUNT_KIDS
	,ORGANIZATION_NAME
	, BADGE_NUM
	, SUM(CASE WHEN COURSE_LEVEL = 'BEP' THEN 1 ELSE 0 END) AS COUNTBEP
	, SUM(CASE WHEN COURSE_LEVEL = 'ESL' THEN 1 ELSE 0 END) AS COUNTESL

FROM (
SELECT DISTINCT STUDENT_GU, ORGANIZATION_NAME, BADGE_NUM, COURSE_LEVEL
 FROM 
	APS.ScheduleDetailsAsOf(GETDATE()) AS SCH
	INNER JOIN 
	REV.EPC_STAFF AS STF
	ON
	SCH.STAFF_GU = STF.STAFF_GU
	INNER JOIN 
	REV.EPC_CRS_LEVEL_LST AS LST
	ON
	SCH.COURSE_GU = LST.COURSE_GU
	WHERE COURSE_LEVEL IN ('BEP', 'ESL')
) AS UNIQUEKIDS

GROUP BY 
	ORGANIZATION_NAME
	, BADGE_NUM

) AS COUNTKIDS

ON
COUNTKIDS.ORGANIZATION_NAME = TOTALS.School
AND COUNTKIDS.BADGE_NUM = TOTALS.Badge

) AS OVERRIDEME

GO


