USE [ST_Production]
GO

/****** Object:  UserDefinedFunction [APS].[LCEStudentsAndProvidersAsOf_2]    Script Date: 10/10/2017 9:47:59 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




/******************************************************************

CREATED BY DEBBIE ANN CHAVEZ
DATE 5/23/2017

--FUNCTION FOR 2017-2018 AND FORWARD
--NEW ESL AND BEP RULES 

*******************************************************************/

ALTER FUNCTION [APS].[LCEStudentsAndProvidersAsOf_2](@AsOfDate DATETIME)
RETURNS TABLE
AS
RETURN

--DECLARE @AsOfDate DATE = '20170814'

SELECT DISTINCT 
	ORGANIZATION_NAME	
	,SIS_NUMBER

	,STU_NAME
	,GRADE
	,TEST_NAME
	, PERFORMANCE_LEVEL
	,TEST_SCORE
	,SCORE_DESCRIPTION

	,ENTER_DATE
	,BADGE_NUM

	,COURSE_ID
	,SECTION_ID
	,COURSE_TITLE

	,STAFF_NAME
	,QUALIFIED_CLASS
	
	,PRIMARY_DISABILITY_CODE
	,CASE WHEN WAIVER_TYPE = 'RALS' THEN 'Y' ELSE '' END AS PARENT_REFUSED
	,PARENT_REFUSED_ENTER_DATE
	,CASE WHEN PARENT_REFUSED_ENTER_DATE NOT BETWEEN '20170701' AND '20180630' THEN 'Not Valid for Current School Year' ELSE '' END AS PARENT_REFUSAL_STATUS

	,TESOL
	,BILINGUAL

	--,CASE 
	--	WHEN (STAFF_NAME  IS NULL AND WAIVER_TYPE = 'RALS') THEN 'Parent Refused' 
	--	WHEN (STAFF_NAME  IS NULL AND WAIVER_TYPE IS NULL) THEN 'No Appropriate Course Assigned'

	--ELSE ''	END AS [STATUS]

	,ORGANIZATION_GU
	,LIST_ORDER

	FROM 
	(
SELECT 
	ORG.ORGANIZATION_NAME	
	,BS.SIS_NUMBER

	,ISNULL(BS.LAST_NAME,'')  + ' ' + ISNULL(BS.FIRST_NAME,'') +  ISNULL(', ' +BS.MIDDLE_NAME,'') AS STU_NAME
	,GRADE.VALUE_DESCRIPTION AS GRADE
	,LE.TEST_NAME
	,LE.PERFORMANCE_LEVEL
    ,LE.TEST_SCORE
	,LE.SCORE_DESCRIPTION
	,CAST(ELL.ENTER_DATE AS DATE) AS ENTER_DATE
	,STAFF2.BADGE_NUM
	
	,COURSE_ID
	,SECTION_ID
	,COURSE_TITLE
	
	,STAFF.LAST_NAME + ', ' +  STAFF.FIRST_NAME AS STAFF_NAME
	
	,QUALIFIED_CLASS

	,PRIMARY_DISABILITY_CODE
	,PARENTREFUSAL.WAIVER_TYPE
	,CAST(PARENTREFUSAL.WAIVER_ENTER_DATE AS DATE) AS PARENT_REFUSED_ENTER_DATE

	,ORG.ORGANIZATION_GU
	,GRADE.LIST_ORDER
	,TESOL
	,BILINGUAL
 FROM

	--APS.ELLAsOf (@AsOfDate) AS ELL
	APS.ELLCalculatedAsOf (@AsOfDate) AS ELL

	INNER JOIN
	APS.BasicStudent AS BS
	ON
	ELL.STUDENT_GU = BS.STUDENT_GU

	INNER JOIN 
		(
		--DECLARE @AsOfDate DATE = GETDATE()
		SELECT * 
		FROM (
		SELECT 
		STU.STUDENT_GU, TEST_NAME, PF.VALUE_DESCRIPTION AS PERFORMANCE_LEVEL, TEST_SCORE, SCORE_DESCRIPTION 
		,ROW_NUMBER() OVER (PARTITION BY STU.STUDENT_GU ORDER BY SCORE_DESCRIPTION) AS RN
		FROM 
		APS.LCELatestEvaluationAsOf (@AsOfDate)  AS LE
		INNER JOIN 
		REV.EPC_STU AS STU
		ON
		LE.STUDENT_GU = STU.STUDENT_GU
		INNER JOIN
		rev.EPC_STU_TEST_PART AS PARTS
		ON
		PARTS.STUDENT_TEST_GU = LE.STUDENT_TEST_GU

		INNER JOIN
		rev.EPC_STU_TEST_PART_SCORE AS SCORES
		ON
		SCORES.STU_TEST_PART_GU = PARTS.STU_TEST_PART_GU

		LEFT JOIN
		rev.EPC_TEST_SCORE_TYPE AS SCORET
		ON
		SCORET.TEST_GU = LE.TEST_GU
		AND SCORES.TEST_SCORE_TYPE_GU = SCORET.TEST_SCORE_TYPE_GU
	
		LEFT JOIN
		rev.EPC_TEST_DEF_SCORE AS SCORETDEF
		ON
		SCORETDEF.TEST_DEF_SCORE_GU = SCORET.TEST_DEF_SCORE_GU
		INNER JOIN
		APS.LookupTable ('K12.TestInfo','PERFORMANCE_LEVELS') AS PF
		ON
		LE.PERFORMANCE_LEVEL = PF.VALUE_CODE
		) AS LATESTTEST
		WHERE 
		RN = 1
		) AS LE
		
		ON
		LE.STUDENT_GU = ELL.STUDENT_GU

		LEFT JOIN
		(
		--DECLARE @AsOfDate DATE = GETDATE()
		SELECT
			CurrentSPED.STUDENT_GU
			,CurrentSPED.PRIMARY_DISABILITY_CODE
		FROM	
			APS.PrimaryEnrollmentsAsOf(@AsOfDate) AS Enrollment
			LEFT JOIN
			(
			SELECT
				STUDENT_GU
				,PRIMARY_DISABILITY_CODE
			FROM
				REV.EP_STUDENT_SPECIAL_ED AS SPED
			WHERE
				NEXT_IEP_DATE IS NOT NULL
				AND (
					EXIT_DATE IS NULL 
					OR EXIT_DATE >= CONVERT(DATE, @AsOfDate)
					)
			) AS CurrentSPED
			ON
			Enrollment.STUDENT_GU = CurrentSPED.STUDENT_GU
			WHERE 
				CurrentSPED.STUDENT_GU IS NOT NULL

		) AS SPED

	ON
	ELL.STUDENT_GU = SPED.STUDENT_GU

	LEFT JOIN
	APS.LCEMostRecentALSRefusalAsOf (@AsOfDate) AS PARENTREFUSAL
	ON
	PARENTREFUSAL.STUDENT_GU = ELL.STUDENT_GU

	INNER JOIN
	APS.LookupTable ('K12','Grade') GRADE
	ON
	ELL.GRADE = GRADE.VALUE_CODE

	INNER JOIN
	rev.REV_ORGANIZATION_YEAR AS ORGYR
	ON
	ORGYR.ORGANIZATION_YEAR_GU = ELL.ORGANIZATION_YEAR_GU

	INNER JOIN
	rev.REV_ORGANIZATION AS ORG
	ON
	ORG.ORGANIZATION_GU = ORGYR.ORGANIZATION_GU



-- PULL ALL STUDENTS ESL COURSE/SECTIONS AND IF IT IS QUALIFIED	
		LEFT JOIN 
		(
		--DECLARE @AsOfDate DATE = GETDATE()
		SELECT SCH.ORGANIZATION_YEAR_GU, SCH.ORGANIZATION_GU, STUDENT_GU, SIS_NUMBER, SCH.COURSE_GU, SCH.COURSE_ID, SCH.SECTION_GU, SCH.SECTION_ID, SCH.STAFF_GU, SCH.COURSE_TITLE
		, CASE WHEN QUALIFIED.COURSE_ID IS NULL THEN 'No Appropriate Credential' 
			WHEN QUALIFIED.ElementaryTESOLWaiverOnly = 1 OR QUALIFIED.ElementaryBilingualWaiverOnly	= 1 OR QUALIFIED.SecondaryTESOLWaiverOnly =1 OR	QUALIFIED.SecondaryBilingualWaiverOnly = 1
			OR QUALIFIED.TeacherBilingualWaiverOnly = 1 OR	QUALIFIED.TeacherTESOLWaiverOnly = 1
		THEN 'W'
		ELSE 'Y' END AS QUALIFIED_CLASS
		FROM 
			[APS].ScheduleAsOf(@AsOfDate) AS SCH
		INNER JOIN 
					(
					SELECT 
						CRS.COURSE_GU
						,SECT.SECTION_ID
						,SECT.SECTION_GU
						,ORGYR.ORGANIZATION_YEAR_GU
						,COURSE_LEVEL AS TAG
					 FROM 
					rev.EPC_CRS AS CRS
					INNER JOIN 
					rev.EPC_SCH_YR_CRS AS CRSYR
					ON
					CRS.COURSE_GU = CRSYR.COURSE_GU
					INNER JOIN 
					rev.EPC_SCH_YR_SECT AS SECT
					ON
					CRSYR.SCHOOL_YEAR_COURSE_GU = SECT.SCHOOL_YEAR_COURSE_GU
					INNER JOIN 
					rev.REV_ORGANIZATION_YEAR AS ORGYR
					ON
					CRSYR.ORGANIZATION_YEAR_GU = ORGYR.ORGANIZATION_YEAR_GU
					INNER JOIN 
					rev.REV_ORGANIZATION AS ORG
					ON
					ORGYR.ORGANIZATION_GU = ORG.ORGANIZATION_GU
					INNER JOIN 
					rev.EPC_CRS_LEVEL_LST AS LST
					ON
					LST.COURSE_GU = CRS.COURSE_GU 
					INNER JOIN 
					rev.REV_YEAR AS YRS
					ON
					ORGYR.YEAR_GU = YRS.YEAR_GU
			

					WHERE
					LST.COURSE_LEVEL IN ('ESL')
					AND SCHOOL_YEAR = (SELECT SCHOOL_YEAR FROM APS.YearDates AS yr INNER JOIN REV.REV_YEAR AS YRS
										ON YR.YEAR_GU = YRS.YEAR_GU	WHERE (@AsOfDate BETWEEN [yr].[START_DATE] AND [yr].[END_DATE])
										AND [yr].EXTENSION = 'R')
					) AS ALLCLASSES

			ON
				ALLCLASSES.ORGANIZATION_YEAR_GU = SCH.ORGANIZATION_YEAR_GU
				AND ALLCLASSES.COURSE_GU = SCH.COURSE_GU
				AND ALLCLASSES.SECTION_GU = SCH.SECTION_GU


	LEFT HASH JOIN
		APS.LCEClassesWithMoreInfoAsOf_2(@AsOfDate) AS QUALIFIED
		ON
		QUALIFIED.ORGANIZATION_YEAR_GU = ALLCLASSES.ORGANIZATION_YEAR_GU
		AND
		QUALIFIED.COURSE_GU = ALLCLASSES.COURSE_GU
		AND 
		ALLCLASSES.SECTION_GU = QUALIFIED.SECTION_GU
					
	) AS ALLBEPESLCLASSES
					
	ON
	ELL.STUDENT_GU = ALLBEPESLCLASSES.STUDENT_GU


	LEFT JOIN
	rev.REV_PERSON AS STAFF
	ON
	ALLBEPESLCLASSES.STAFF_GU = STAFF.PERSON_GU

	LEFT JOIN
	rev.EPC_STAFF AS STAFF2
	ON
	STAFF.PERSON_GU = STAFF2.STAFF_GU


	LEFT JOIN 
	(SELECT DISTINCT
	STAFF_GU, MAX([27]) AS TESOL, MAX([67]) AS BILINGUAL
 FROM 
(
SELECT * FROM 
REV.EPC_STAFF_CRD
WHERE
AUTHORIZED_TCH_AREA IN  ('27','67')
) AS T1
PIVOT
(
MAX (AUTHORIZED_TCH_AREA)
FOR AUTHORIZED_TCH_AREA IN ([27], [67])
) AS PIVOTME
GROUP BY STAFF_GU
) AS ENDORSEMENTS
ON
STAFF2.STAFF_GU = ENDORSEMENTS.STAFF_GU


) AS T1


--GO









GO


